/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type WebsocketMessage2UI =
  | ("Ping" | "Pong")
  | {
      Error: string;
    }
  | {
      Debug: DebugMessage2UI;
    }
  | {
      Event: EventMessage2UI;
    }
  | {
      Match: MatchMessage2UI;
    };
export type DebugMessage2UI = {
  ReplyTest: string;
};
export type EventMessage2UI =
  | {
      Details: EventMessageDetails2UI;
    }
  | {
      Team: EventMessageTeam2UI;
    }
  | {
      Award: EventMessageAward2UI;
    };
export type EventMessageDetails2UI = {
  Current: EventDetails;
};
export type EventMessageTeam2UI = {
  CurrentAll: Team[];
};
export type EventMessageAward2UI = {
  CurrentAll: Award[];
};
export type MatchMessage2UI =
  | {
      All: SerializedMatch[];
    }
  | {
      Next: SerializedMatch | null;
    }
  | {
      Last: SerializedMatch | null;
    };
export type MatchSubtype = "Quarterfinal" | "Semifinal" | "Final";
export type MatchType = "Test" | "Qualification" | "Playoff";
export type Alliance = "blue" | "red";
export type WebsocketMessage2JMS =
  | ("Ping" | "Pong")
  | {
      Subscribe: string[];
    }
  | {
      Debug: DebugMessage2JMS;
    }
  | {
      Event: EventMessage2JMS;
    }
  | {
      Match: MatchMessage2JMS;
    };
export type DebugMessage2JMS = {
  ReplyTest: string;
};
export type EventMessage2JMS =
  | {
      Details: EventMessageDetails2JMS;
    }
  | {
      Team: EventMessageTeam2JMS;
    }
  | {
      Award: EventMessageAward2JMS;
    };
export type EventMessageDetails2JMS = {
  Update: EventDetails;
};
export type EventMessageTeam2JMS =
  | {
      Insert: Team;
    }
  | {
      Delete: string;
    };
export type EventMessageAward2JMS =
  | {
      Create: string;
    }
  | {
      Update: Award;
    }
  | {
      Delete: string;
    };
export type MatchMessage2JMS =
  | {
      Reset: string;
    }
  | {
      Delete: string;
    }
  | {
      Update: Match;
    };

export interface AllWebsocketMessages {
  jms2ui: WebsocketMessage2UI;
  recv_meta: RecvMeta;
  send_meta: SendMeta;
  ui2jms: WebsocketMessage2JMS;
}
export interface EventDetails {
  av_chroma_key: string;
  av_event_colour: string;
  code?: string | null;
  event_name?: string | null;
  webcasts: string[];
}
export interface Team {
  affiliation?: string | null;
  id: string;
  location?: string | null;
  name?: string | null;
  notes?: string | null;
  number: number;
  schedule: boolean;
  wpakey?: string | null;
}
export interface Award {
  id: string;
  name: string;
  recipients: AwardRecipient[];
}
export interface AwardRecipient {
  awardee?: string | null;
  team?: number | null;
}
export interface SerializedMatch {
  blue_alliance?: number | null;
  blue_teams: (number | null)[];
  id: string;
  match_number: number;
  match_subtype?: MatchSubtype | null;
  match_type: MatchType;
  name: string;
  played: boolean;
  ready: boolean;
  red_alliance?: number | null;
  red_teams: (number | null)[];
  set_number: number;
  short_name: string;
  start_time?: string | null;
  winner?: Alliance | null;
}
export interface RecvMeta {
  msg: WebsocketMessage2JMS;
  seq: number;
}
export interface Match {
  blue_alliance?: number | null;
  blue_teams: (number | null)[];
  match_number: number;
  match_subtype?: MatchSubtype | null;
  match_type: MatchType;
  played: boolean;
  ready: boolean;
  red_alliance?: number | null;
  red_teams: (number | null)[];
  set_number: number;
  start_time?: string | null;
  winner?: Alliance | null;
}
export interface SendMeta {
  bcast: boolean;
  msg: WebsocketMessage2UI;
  reply?: number | null;
  seq: number;
}
