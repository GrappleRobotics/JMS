image: jaci/jms
tag: latest
imagePullSecrets: {}
imagePullPolicy: IFNotPresent

arena:
  command: [ "jms-arena" ]
  enabled: true
  resources:
    requests:
      memory: 512Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 1

backup:
  command: [ "jms-backup" ]
  enabled: true
  resources:
    requests:
      memory: 1024Mi
      cpu: 50m
    limits:
      memory: 2048Mi
      cpu: 1

core:
  command: [ "jms-core" ]
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 1

driverstation:
  command: [ "jms-driverstation" ]
  enabled: true
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1024Mi
      cpu: 2

electronics:
  command: [ "jms-electronics" ]
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 512Mi
      cpu: 500m

matchlogs:
  command: [ "jms-match-logs" ]
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 500m

networking:
  command: [ "jms-networking" ]
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 2

tba:
  command: [ "jms-tba" ]
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 500m

ui:
  image: jaci/jms-ui
  replicaCount: 3
  enabled: true
  resources:
    requests:
      memory: 512Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 2

websocket:
  command: [ "jms-websocket" ]
  replicaCount: 3
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 1024Mi
      cpu: 2

rabbitmq:
  fullnameOverride: rabbitmq
  auth:
    password: rabbitmq

# Thanks https://medium.com/@gerkElznik/deploy-redis-stack-using-bitnamis-helm-chart-d8339453352c
redis:
  image:
    repository: "redis/redis-stack-server"
    tag: "6.2.4-v2"
  architecture: standalone
  auth:
    enabled: false
  fullnameOverride: redis
  cluster:
    enabled: false
  master:
    args:
      - -c
      - /opt/bitnami/scripts/merged-start-scripts/start-master.sh
    extraVolumes:
      - name: merged-start-scripts
        configMap:
          name: bitnami-redis-stack-server-merged
          defaultMode: 0755
    extraVolumeMounts:
      - name: merged-start-scripts
        mountPath: /opt/bitnami/scripts/merged-start-scripts
    persistence:
      enabled: true
    resources:
      requests:
        memory: 1024Mi
        cpu: 500m
  replica:
    replicaCount: 0
  extraDeploy:
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: bitnami-redis-stack-server-merged
    data:
      start-master.sh: |
        #!/usr/bin/dumb-init /bin/bash
        ### docker entrypoint script, for starting redis stack
        BASEDIR=/opt/redis-stack
        cd ${BASEDIR}
        CMD=${BASEDIR}/bin/redis-server
        if [ -z "${REDISEARCH_ARGS}" ]; then
        REDISEARCH_ARGS="MAXSEARCHRESULTS 10000 MAXAGGREGATERESULTS 10000"
        fi
        if [ -z "${REDISGRAPH_ARGS}" ]; then
        REDISGRAPH_ARGS="MAX_QUEUED_QUERIES 25 TIMEOUT 1000 RESULTSET_SIZE 10000"
        fi
        if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
        fi
        if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
        fi
        ${CMD} \
        --port "${REDIS_PORT}" \
        --protected-mode no \
        --include "/opt/bitnami/redis/etc/redis.conf" \
        --include "/opt/bitnami/redis/etc/master.conf" \
        --loadmodule /opt/redis-stack/lib/redisearch.so ${REDISEARCH_ARGS} \
        --loadmodule /opt/redis-stack/lib/redisgraph.so ${REDISGRAPH_ARGS} \
        --loadmodule /opt/redis-stack/lib/redistimeseries.so ${REDISTIMESERIES_ARGS} \
        --loadmodule /opt/redis-stack/lib/rejson.so ${REDISJSON_ARGS} \
        --loadmodule /opt/redis-stack/lib/redisbloom.so ${REDISBLOOM_ARGS}
